# -*- coding: utf-8 -*-
"""bryan_code2.0 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RYHUkpaCPfgxXExRLfyMDFgeEWcdtYu4
"""

#This is a notebook made for the sole purpose of learning the process of generating fake images.
#Most code will be provided by Chatgpt and one's own intuition. Do not replicate unless absolutely necessary for assignment completion or aid.
#And always reference the owner for use before access.

import os

import torch
print(torch.__version__)          # Should show the installed PyTorch version
print(torch.version.cuda)         # Should show the CUDA version PyTorch was compiled with
print(torch.cuda.is_available())  # Should return True if CUDA is available

#Install all these necessary models
!pip install tensorflow matplotlib numpy
!pip install ffhq-dataset
!pip install torch
!pip install torchvision
!pip install ninja
!pip install click requests tqdm pyspng ninja imageio-ffmpeg

import torch
import torchvision

print(f"PyTorch version: {torch.__version__}")
print(f"torchvision version: {torchvision.__version__}")

from google.colab import drive
drive.mount('/content/drive')

import torch
print(f"PyTorch version: {torch.__version__}")
print(f"CUDA available: {torch.cuda.is_available()}")
print(f"CUDA version: {torch.version.cuda}")

# Commented out IPython magic to ensure Python compatibility.
# Clone the StyleGAN3 repository
!git clone https://github.com/NVlabs/stylegan3.git
# %cd stylegan3

!python dataset_tool.py --source="/content/drive/MyDrive/fashion/new_clothing" --dest="clothing_updated"       #To prepare the dataset for training

torch.cuda.empty_cache()

#I have already trained the model to a point so this code below is to resume the training from where I left off
#Replace --data with the path above
#Replace --resume with the path to the the pkl file (You can find that in the subdirectory in stylegan3 folder called model,there you can find it in the most recent subdirectory of model)

!python train.py --outdir="model" --cfg=stylegan3-t --data="/content/drive/MyDrive/fashion/new_clothing" --resume="/content/stylegan3/model/00003-stylegan3-t-new_clothing-gpus1-batch12-gamma8.2/network-snapshot-000400.pkl" --gpus=1 --batch=12 --gamma=8.2 --mirror=1 --kimg=2000 --aug=ada

# Import dnnlib and legacy from the cloned repository
import dnnlib
import legacy
import tensorflow as tf

# Path to the dataset directory
import os
fashion_dst = "/content/drive/MyDrive/fashion/new_clothing"

# Load and preprocess images from the 'african_fashion' directory
image_size = (28, 28)
batch_size = 256

# Load images and create a dataset
dataset = tf.keras.preprocessing.image_dataset_from_directory(
    fashion_dst,        #replace with the path to the dataset
    image_size=image_size,
    batch_size=batch_size,
    color_mode='grayscale'
)

# Normalize the images to [-1, 1]
def normalize_img(img, label):
    img = (img - 127.5) / 127.5
    return img, label

dataset = dataset.map(normalize_img)

# Shuffle and batch the dataset with drop_remainder=True
BUFFER_SIZE = 60000
BATCH_SIZE = 256
train_dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

def load_model(network_file): # Changed the input to network_file
    print('Loading networks from "%s"...' % network_file)
    G = legacy.load_network_pkl(network_file)['G_ema'].to(device)  # type: ignore
    return G

import torch
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import requests
from io import BytesIO

# # Set up the device
# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
# print(f"Using device: {device}")

# # Download the pre-trained StyleGAN2 model
# network_url = "https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/ffhq.pk"
# response = requests.get(network_url)
# network_file = BytesIO(response.content)

# # Load the model
# G = load_model(network_file).to(device)
import torch
import pickle
import os

# Set up the device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')  # Use GPU if available, otherwise fallback to CPU
print(f"Using device: {device}")

# Path to your local model file
model_path = "/content/stylegan3/model/00003-stylegan3-t-new_clothing-gpus1-batch12-gamma8.2/network-snapshot-000400.pkl"

# Function to load the model
def load_model(file_path):
    with open(file_path, 'rb') as f:
        return pickle.load(f)['G_ema'].to(device)

# Load the model
try:
    G = load_model(model_path)
    print("Model loaded successfully!")
except Exception as e:
    print(f"Error loading the model: {e}")

# You can now use G for further operations

# Function to save images
def save_image(tensor, filename):
    img = (tensor * 255).clamp(0, 255).byte().cpu().numpy()
    img = np.transpose(img, (1, 2, 0))
    Image.fromarray(img).save(filename)

# Function to generate images
# Generate images function
def generate_images(model, num_images, seed, batch_size=1):
    torch.manual_seed(seed)
    latent_dim = model.z_dim
    num_batches = (num_images + batch_size - 1) // batch_size  # Compute number of batches

    for batch in range(num_batches):
        current_batch_size = min(batch_size, num_images - batch * batch_size)
        z = torch.randn(current_batch_size, latent_dim, device=device)
        imgs = model(z, None, truncation_psi=0.5)

        for i in range(current_batch_size):
            img = (imgs[i] + 1) / 2  # Normalize to [0, 1] range
            save_image(img, f'generated_image_{batch * batch_size + i}.png')

# Generate and save images
num_images = 5
seed = 42
batch_size = 12
generate_images(G, num_images, seed, batch_size)

# Display the generated images
fig, axs = plt.subplots(1, num_images, figsize=(15, 15))
for i in range(num_images):
    img = plt.imread(f'generated_image_{i}.png')
    axs[i].imshow(img)
    axs[i].axis('off')
plt.show()